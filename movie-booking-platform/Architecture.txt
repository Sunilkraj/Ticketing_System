# üé¨ Movie Booking Platform ‚Äî Setup Guide

This document describes how to **import, configure, and understand** the Movie Booking Platform built with Spring Boot Microservices.

---

## üì¶ Import Instructions

1. **Unzip** `Spring Boot Application.zip`.  
2. In Eclipse:  
   - `File ‚Üí Import ‚Üí Existing Maven Projects`  
   - Select the unzipped folder `movie-booking-platform`.  
   - Eclipse will detect all modules.

---

## üìÇ Project Structure
movie-booking-platform (pom)
‚îú‚îÄ‚îÄ discovery-server
‚îÇ   ‚îú‚îÄ‚îÄ src/main/java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/discovery
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ DiscoveryServerApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ src/main/resources
‚îÇ       ‚îî‚îÄ‚îÄ application.yml
‚îú‚îÄ‚îÄ api-gateway
‚îÇ   ‚îú‚îÄ‚îÄ src/main/java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/apigateway
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ApiGatewayApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ src/main/resources
‚îÇ       ‚îî‚îÄ‚îÄ application.yml
‚îú‚îÄ‚îÄ show-service
‚îÇ   ‚îú‚îÄ‚îÄ src/main/java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/showservice
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ entities
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ repositories
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ services
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ ShowServiceApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ src/main/resources
‚îÇ       ‚îî‚îÄ‚îÄ application.yml
‚îú‚îÄ‚îÄ booking-service
‚îÇ   ‚îú‚îÄ‚îÄ src/main/java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/bookingservice
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ entities
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ repositories
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ services
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ BookingServiceApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ src/main/resources
‚îÇ       ‚îî‚îÄ‚îÄ application.yml
‚îú‚îÄ‚îÄ theatre-service
‚îÇ   ‚îú‚îÄ‚îÄ src/main/java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/theatreservice
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ entities
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ repositories
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ services
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ TheatreServiceApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ src/main/resources
‚îÇ       ‚îî‚îÄ‚îÄ application.yml
‚îú‚îÄ‚îÄ movie-service
‚îÇ   ‚îú‚îÄ‚îÄ src/main/java
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/movieservice
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ entities
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ repositories
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ services
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ MovieServiceApplication.java
‚îÇ   ‚îî‚îÄ‚îÄ src/main/resources
‚îÇ       ‚îî‚îÄ‚îÄ application.yml
‚îî‚îÄ‚îÄ payment-service
    ‚îú‚îÄ‚îÄ src/main/java
    ‚îÇ   ‚îî‚îÄ‚îÄ com/xyz/moviebooking/paymentservice
    ‚îÇ       ‚îú‚îÄ‚îÄ entities
    ‚îÇ       ‚îú‚îÄ‚îÄ repositories
    ‚îÇ       ‚îú‚îÄ‚îÄ services
    ‚îÇ       ‚îú‚îÄ‚îÄ controllers
    ‚îÇ       ‚îî‚îÄ‚îÄ PaymentServiceApplication.java
    ‚îî‚îÄ‚îÄ src/main/resources
        ‚îî‚îÄ‚îÄ application.yml
		
---

## üìù Selected Write Scenario: Book Movie Tickets

### üéØ Design Patterns Used
- **Facade Pattern** ‚Üí `BookingFacadeService` orchestrates booking workflow:  
  - Check availability  
  - Calculate price  
  - Lock seats  
  - Process payment  
  - Confirm booking  

- **Strategy Pattern** ‚Üí Different discount strategies:  
  - `ThirdTicketDiscountStrategy`  
  - `AfternoonShowDiscountStrategy`  

---

## üèóÔ∏è Architectural Diagram


Architectural Diagram
========================
  +-------------------+      +-----------------+      +---------------------+
  |   Web / Mobile    |      |   API Gateway   |      |   Service Registry  |
  |     Clients       +----->+  (Spring Cloud  +----->+    (Eureka/Consul)  |
  |                   |      |     Gateway)    |      |                     |
  +-------------------+      +--------+--------+      +---------------------+
                                      |
              +-----------------------+-----------------------+
              |                       |                       |
      +-------v-------+       +-------v-------+       +-------v-------+
      |  Booking      |       |   Show &      |       |   Theatre     |
      |  Service      |       |   Movie Service|      |  Management   |
      |  (Write)      |       |   (Read)      |       |  Service      |
      +-------+-------+       +-------+-------+       +-------+-------+
              |                       |                       |
      +-------v-------+       +-------v-------+       +-------v-------+
      |   PostgreSQL  |       |   PostgreSQL  |       |   PostgreSQL  |
      |   (Booking)   |       |   (Read)      |       |   (Theatre)   |
      +-------+-------+       +-------+-------+       +-------+-------+
              |                       |                       |
      +-------v-----------------------+-----------------------+-------+
      |                 Centralized Logging (ELK Stack)               |
      |                 Monitoring (Prometheus/Grafana)               |
      +---------------------------------------------------------------+
                                      |
                              +-------v-------+
                              |   Cloud       |
                              |   (AWS/Azure) |
                              +---------------+
							  

---

## üîë Key Design Decisions

- **Microservices Architecture** ‚Üí Independent scaling for booking (write-heavy) vs browsing (read-heavy).  
- **API Gateway** ‚Üí Centralized entry point for authentication, routing, and rate-limiting.  
- **Database per Service** ‚Üí Loose coupling. Supports **CQRS** for read-heavy queries.  

### üîÑ Transactional Integrity
- **Saga Pattern** ‚Üí Handles distributed transactions (booking + payment).  
- **Pessimistic Locking** ‚Üí Prevents seat overbooking.  

### üì° Integration & Localization
- REST APIs + Async Messaging (Kafka/RabbitMQ).  
- Localization supported via `Accept-Language` header.  

### üìà Scalability & Availability
- Multi-region deployment (AWS/Azure).  
- Auto-scaling via Kubernetes / AWS ASG.  
- Redis cache for frequently accessed data.  

### üîí Security
- HTTPS enforced at API Gateway.  
- OAuth2.0 / JWT authentication.  
- OWASP Top 10 protections (input validation, WAF, secrets management).  

---

## ‚öôÔ∏è Platform Provisioning & Tech Choices

- **Language** ‚Üí Java 17  
- **Framework** ‚Üí Spring Boot + Spring Cloud  
- **Databases** ‚Üí PostgreSQL (per service)  
- **Async Messaging** ‚Üí Kafka / RabbitMQ  
- **Cloud** ‚Üí AWS (EKS, RDS, ElastiCache, S3)  
- **Monitoring & Logging** ‚Üí Prometheus, Grafana, ELK Stack  
- **AI Extension (Optional)** ‚Üí Recommendation engine using ML  

---

## üóÑÔ∏è PostgreSQL Setup

Run in `psql`:

```sql
CREATE DATABASE show_db;
CREATE DATABASE booking_db;
CREATE DATABASE theatre_db;
CREATE DATABASE movie_db;
CREATE DATABASE payment_db;
